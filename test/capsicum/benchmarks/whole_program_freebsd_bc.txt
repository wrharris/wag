Introduction:

This is a guide for using a UNIX build system based on autotools to
build the bitcode representation of a whole program on FreeBSD 9.0.


Overview:

To build a bitcode of a whole program you must:

1. Install versions of the GNU gold linker (gold) and archive utility
(ar) that support plugins, and compile an LLVM plugin used by both.

2. Edit the build system of the target program as follows:

(a) set clang as the C compiler

(b) direct clang to emit LLVM bitcode

(c) direct the linker to link bitcodes by using the LLVM plugin

(d) use ar, instead of ranlib, to add a symbol table to each archive
created by the build system.


Detailed Instructions:

There are many ways to carry out the high-level requirements in the
Overview. Given that many UNIX applications still use autotools for
their build system, it is practically impossible to implement one
failsafe plan that works for every application build
system. Nevertheless, here are methods that seem to work for most
reasonable build systems:

1. Install gold linker and ar with plugins: follow the official LLVM
documentation at <http://llvm.org/docs/GoldPlugin.html>. (*)

Set LD_LIBRARY_PATH to contain /usr/lib/bfd-plguins.

2. (a) When running the build system's configure script, set CC=clang.

(b) After running configure, set CFLAGS=-emit-llvm in all Makefiles. (**)

(c) When running configure, set
LDFLAGS=-Wl,-plugin=LLVMgold.so,-plugin-opt=also-emit-llvm (***)

(d) If the build system uses a variable ARFLAGS, then set ARFLAGS to
contain the flag s. Otherwise, add s to the set of flags at all
invocations of ar. Set RANLIB=/usr/bin/true.

(*) Building gold and ar as part of the binutils package can be a
painful process on FreeBSD. You'll need to replace references to the
Linux library libd with references to libc. binutils also uses yacc
scripts that the FreeBSD yacc doesn't parse. However, I was able to
build binutils in Linux, copy the parsers generated by yacc in Linux
to the FreeBSD build tree, and continue the build.

(**) It would be much more convenient to set CFLAGS when running
configure.  Unfortunately, most configure scripts check that CC run
with CFLAGS produces an executable, and abort if not. clang run with
-emit-llvm does not satisfy this.

(***) If the build system does not use LDFLAGS, you can set the flag
value in CFLAGS. As the build compiles each object file, it will then
warn that the linker flags are unused, but this shouldn't break the
build.
